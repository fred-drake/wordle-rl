[flake8]
# Base flake8 configuration:
# https://flake8.pycqa.org/en/latest/user/configuration.html
format = wemake
show-source = True
statistics = False
doctests = True

# Plugins:
max-complexity = 6
max-line-length = 80

# strings are in single or double quotes
# inline-quotes = double

# wemake-python-styleguide settings:
i-control-code = True

# Disable some pydocstyle checks:
# Exclude some pydoctest checks globally:
ignore =
    # Missing docstring in public module
    # D100
    # Missing docstring in public package
    # D104
    # Missing docstring in public nested class
    # D106
    # First line should be in imperative mood
    D401
    # line break after binary operator
    W504
    # per-file ignoring (better to live)
    X100
    # Unknown directive type "XXX".
    RST303
    # Unknown interpreted text role "XXX".
    RST304
    # Darglint configuration
    # The docstring parameter type doesn't match function.
    # DAR103
    # The docstring parameter type doesn't match function.
    # DAR203

# Excluding some directories:
exclude =
    .git
    __pycache__
    .venv
    .eggs
    *.egg
    # add the following directories
    .venv
    .mypy_cache
    .vscode

# Ignoring some errors in some files:
per-file-ignores =
  # Enable `assert` keyword and magic numbers for tests:
  tests/*.py: S101, WPS226, WPS432

[darglint]
# darglint configuration:
# https://github.com/terrencepreilly/darglint
strictness = long

[mypy]
# mypy configurations: http://bit.ly/2zEl9WI
files =
  src/,
  tests/
allow_redefinition = False
check_untyped_defs = True
disallow_any_explicit = True
disallow_any_generics = True
disallow_untyped_calls = True
ignore_errors = False
ignore_missing_imports = True
implicit_reexport = False
local_partial_types = True
strict_optional = True
strict_equality = True
no_implicit_optional = True
warn_no_return = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unused_configs = True
warn_unreachable = True

[tool:pytest]
# search for tests only in tests/ directory
testpaths = tests
# make XPASS (“unexpectedly passing”) result to fail the test suite
xfail_strict = true
addopts =
  # report details (verbose)
  -v
  # xdist - number of parallel test executors (auto - detect automatically)
  # -n auto
  # report the local variables for every failure with the stacktrace
  -l
  # report the reasons for all tests that skipped, xfailed, or xpassed
  -rsxX
  # treat unregistered markers as errors allowing to avoid typos
  --strict-markers
  # short traceback format
  --tb=short
  # execute doctests directly from docstrings of your classes and functions
  --doctest-modules
  # coverage
  --cov
  # generate html coverage report and store it into htmlcov dir
  --cov-report=html:htmlcov

[coverage:run]
# directory to run coverage on
source = src/

[coverage:report]
# do not consider the following lines during coverage calculation
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
